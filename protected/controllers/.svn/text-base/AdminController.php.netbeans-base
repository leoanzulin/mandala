<?php

class AdminController extends Controller
{

    // TODO: Refatorar este método
    public function actionGerenciarPreInscricoes()
    {
        if (isset($_POST['pagou_inscricao'])) {
            $cpfsInscricoesPagas = $_POST['pagou_inscricao'];
            foreach ($cpfsInscricoesPagas as $cpf) {
                $inscricao = Inscricao::model()->findByAttributes(array('cpf' => $cpf));
                $inscricao->status = Inscricao::STATUS_PAGOU_PRE_INSCRICAO;
                $inscricao->saveAttributes(array('status'));
                Email::mensagemEnviarDocumentos($inscricao->nome, $inscricao->email, $inscricao->cpf);
                Yii::log("{$inscricao} pagou a inscrição.", 'info', 'system.controllers.AdminController');
            }
        }

        if (isset($_POST['documentos_validados'])) {
            $cpfsDocumentosValidados = $_POST['documentos_validados'];
            foreach ($cpfsDocumentosValidados as $cpf) {
                $inscricao = Inscricao::model()->findByAttributes(array('cpf' => $cpf));
                $inscricao->status = Inscricao::STATUS_DOCUMENTOS_VERIFICADOS;
                $inscricao->saveAttributes(array('status'));
                Yii::log("{$inscricao} teve os documentos validados.", 'info', 'system.controllers.AdminController');
            }
        }

        if (isset($_POST['pagou_matricula'])) {
            $cpfsMatriculasPagas = $_POST['pagou_matricula'];
            foreach ($cpfsMatriculasPagas as $cpf) {
                $inscricao = Inscricao::model()->findByAttributes(array('cpf' => $cpf));
                $inscricao->status = Inscricao::STATUS_MATRICULADO;
                $inscricao->saveAttributes(array('status'));
//                $inscricao->transformarEmMatricula($cpf);
                Yii::app()->authManager->revoke('Inscrito', $cpf);
                Yii::app()->authManager->assign('Aluno', $cpf);
                Yii::log("{$inscricao} agora é um aluno.", 'info', 'system.controllers.AdminController');
            }
        }

        $model = new Inscricao('search');
        $model->unsetAttributes();  // clear any default values
        if (isset($_GET['Inscricao'])) {
            $model->attributes = $_GET['Inscricao'];
        }

        $this->render('gerenciarPreInscricoes', array(
            'model' => $model,
        ));
    }

    public function actionView($id)
    {
        $model = Inscricao::model()->findByPk($id);
        $this->render('visualizarPreInscricao', array(
            'model' => $model,
        ));
    }

    public function actionVisualizarPreInscricoesEmComponentes()
    {
        // Recupera alunos que já pagaram 
        $inscricoes = Inscricao::model()->findAllByAttributes(array(
            'status' => Inscricao::STATUS_MATRICULADO,
        ));

        $this->render('visualizarPreInscricoesEmComponentes', array(
            'inscricoes' => $inscricoes,
        ));
    }

    public function actionGerenciarOfertas()
    {
        if (isset($_POST['Oferta'])) {

            // Aqui não tem jeito, se as ofertas vão mudar, as inscrições ligadas
            // a elas têm que ser deletadas. Porém, quando novas ofertas forem
            // cadastradas, as inscrições em ofertas já existentes também serão
            // apagadas.
            // TODO: PENSAR EM FORMAS DE ARRUMAR ESTE PROBLEMA
//            InscricaoOferta::model()->deleteAll();
//            Oferta::model()->deleteAll();
            $erros = array();

            for ($i = 0; $i < count($_POST['Oferta']['componentes']) / 3; $i++) {
                $item = $_POST['Oferta']['componentes'];

//                $idComponente = $item[$i * 3]['componente_id'];
//                $ano = $item[$i * 3 + 1]['ano'];
//                $mes = $item[$i * 3 + 2]['mes'];

//                if (Oferta::model()->findByAttributes(array(
//                            'componente_curricular_id' => $idComponente,
//                            'ano' => $ano,
//                            'mes' => $mes
//                        )) == null) {
                $oferta = new Oferta();
                $oferta->componente_curricular_id = $item[$i * 3]['componente_id'];
                $oferta->ano = $item[$i * 3 + 1]['ano'];
                $oferta->mes = $item[$i * 3 + 2]['mes'];

                if (!$oferta->save()) {
                    array_push($erros, $oferta->errors);
                }
//                }
            }

            if (empty($erros)) {
                Yii::app()->user->setFlash('notificacao', 'Ofertas de componentes salvas com sucesso!');
                Yii::log("Administrador salvou ofertas de componentes.", 'info', 'system.controllers.AdminController');
            } else {
                Yii::app()->user->setFlash('notificacao-negativa', 'Problema ao salvar as ofertas de componentes');
                Yii::log("Ocorreram problemas ao salvar as ofertas de componentes. Erros: " . print_r($erros, true), 'error', 'system.controllers.AdminController');
            }
        }

        $cs = Yii::app()->getClientScript();
        $cs->registerScriptFile(Yii::app()->baseUrl . '/js/bower_components/angular/angular.js');
        $cs->registerScriptFile(Yii::app()->baseUrl . '/js/bower_components/angular-resource/angular-resource.js');
        $cs->registerScriptFile(Yii::app()->baseUrl . '/js/ui-bootstrap-tpls-1.3.3.min.js');
        $cs->registerScriptFile(Yii::app()->baseUrl . '/js/servicos.js');
        $cs->registerScriptFile(Yii::app()->baseUrl . '/js/auxiliar_administrar_ofertas.js');

        $this->render('gerenciarOfertas');
    }

    public function actionConfiguracoes()
    {
        $deMes = Configuracao::model()->findByPk('inscricoes.inicio_periodo_aberto.mes');
        $deAno = Configuracao::model()->findByPk('inscricoes.inicio_periodo_aberto.ano');
        $ateMes = Configuracao::model()->findByPk('inscricoes.fim_periodo_aberto.mes');
        $ateAno = Configuracao::model()->findByPk('inscricoes.fim_periodo_aberto.ano');

        $configuracoesForm = new ConfiguracoesForm();
        $configuracoesForm->mesInicio = $deMes->valor;
        $configuracoesForm->anoInicio = $deAno->valor;
        $configuracoesForm->mesFim = $ateMes->valor;
        $configuracoesForm->anoFim = $ateAno->valor;

        if (isset($_POST['ConfiguracoesForm'])) {
            $configuracoesForm->attributes = $_POST['ConfiguracoesForm'];

            if ($configuracoesForm->validate()) {
                $deMes->valor = $configuracoesForm->mesInicio;
                $deMes->update();
                $deAno->valor = $configuracoesForm->anoInicio;
                $deAno->update();
                $ateMes->valor = $configuracoesForm->mesFim;
                $ateMes->update();
                $ateAno->valor = $configuracoesForm->anoFim;
                $ateAno->update();

                Yii::app()->user->setFlash('notificacao', 'Configurações atualizadas com sucesso!');
            }
        }

        $this->render('configuracoes', array(
            'model' => $configuracoesForm,
        ));
    }

    public function actionRelatorios()
    {
        $this->render('relatorios', array());
    }
    
}
